"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/generatePoll";
exports.ids = ["pages/api/generatePoll"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "circomlibjs":
/*!******************************!*\
  !*** external "circomlibjs" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("circomlibjs");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nlet prisma;\nprisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsSUFBSUMsTUFBSjtBQUVBQSxNQUFNLEdBQUcsSUFBSUQsd0RBQUosRUFBVDtBQUVBLGlFQUFlQyxNQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3JjLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcblxubGV0IHByaXNtYTogUHJpc21hQ2xpZW50O1xuXG5wcmlzbWEgPSBuZXcgUHJpc21hQ2xpZW50KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHByaXNtYTsiXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicHJpc21hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/generatePoll.ts":
/*!***********************************!*\
  !*** ./pages/api/generatePoll.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _helpers_merkle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/merkle */ \"(api)/./pages/api/helpers/merkle.ts\");\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\n\n/** \n * @description: This is the API endpoint for generating and storing a poll in the DB.\n*/\n\n\n/** \n * @function: handler\n * @description: This is the handler for the API endpoint.\n * @param {string} req.body.data.title - The title of the poll.\n * @param {[]string} req.body.data.addresses - The addresses that can vote in the poll.\n * @param {string} req.body.data.description - The description of the poll.\n * @param {string} req.body.data.groupDescription - The description of the group.\n * @param {number} req.body.data.createdAt - The time the poll was created.\n * @param {number} req.body.data.deadline - The deadline of the poll.\n */\nasync function handler(req, res) {\n  if (req.method !== 'POST') {\n    res.status(405).json({\n      name: \"POST endpoint!\",\n      rootHash: \"\",\n      pollId: -1,\n      title: \"\",\n      deadline: -1\n    });\n  }\n\n  if (typeof req.body == 'string') {\n    var body = JSON.parse(req.body);\n  } else {\n    var body = req.body;\n  }\n\n  if (\"data\" in body == false) {\n    res.status(400).json({\n      name: \"No data!\",\n      rootHash: \"\",\n      pollId: -1,\n      title: \"\",\n      deadline: -1\n    });\n  }\n\n  var data = body.data;\n  var title, description, groupDescription, createdAt, deadline, addresses; // Required fields!\n\n  if (\"title\" in data == false) {\n    res.status(400).json({\n      name: \"Add a title!\",\n      rootHash: \"\",\n      pollId: -1,\n      title: \"\",\n      deadline: -1\n    });\n  } else {\n    title = data.title;\n  }\n\n  if (\"addresses\" in data == false) {\n    res.status(400).json({\n      name: \"Must have some addresses!\",\n      rootHash: \"\",\n      pollId: -1,\n      title: \"\",\n      deadline: -1\n    });\n  } else {\n    addresses = data.addresses;\n  }\n\n  if (\"description\" in data == false) {\n    description = \"\";\n  } else {\n    description = data.description;\n  }\n\n  if (\"groupDescription\" in data == false) {\n    groupDescription = \"\";\n  } else {\n    groupDescription = data.groupDescription;\n  }\n\n  if (\"createdAt\" in data == false) {\n    createdAt = Date.now();\n  } else {\n    createdAt = data.createdAt;\n  }\n\n  if (\"deadline\" in data == false) {\n    // Fix: Set time to 1 hour from now\n    var myDate = new Date();\n    myDate.setUTCHours(myDate.getUTCHours() + 1);\n    deadline = myDate.getTime();\n  } else {\n    deadline = data.deadline;\n  }\n\n  console.log(\"Parsed Correctly: \", title, description, groupDescription, createdAt, deadline, addresses);\n  var pollData = await (0,_helpers_merkle__WEBPACK_IMPORTED_MODULE_0__.storePoll)(title, description, groupDescription, createdAt, deadline, addresses);\n  res.status(200).json({\n    name: \"Success!\",\n    rootHash: pollData.rootHash,\n    pollId: pollData.pollId,\n    title: title,\n    deadline: deadline\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ2VuZXJhdGVQb2xsLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBR0E7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxlQUFlQyxPQUFmLENBQ2JDLEdBRGEsRUFFYkMsR0FGYSxFQUdiO0VBQ0EsSUFBSUQsR0FBRyxDQUFDRSxNQUFKLEtBQWUsTUFBbkIsRUFBMkI7SUFDekJELEdBQUcsQ0FBQ0UsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO01BQ25CQyxJQUFJLEVBQUUsZ0JBRGE7TUFDS0MsUUFBUSxFQUFFLEVBRGY7TUFDbUJDLE1BQU0sRUFBRSxDQUFDLENBRDVCO01BQytCQyxLQUFLLEVBQUUsRUFEdEM7TUFDMENDLFFBQVEsRUFBRSxDQUFDO0lBRHJELENBQXJCO0VBR0Q7O0VBQ0QsSUFBSSxPQUFPVCxHQUFHLENBQUNVLElBQVgsSUFBbUIsUUFBdkIsRUFBaUM7SUFDL0IsSUFBSUEsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV1osR0FBRyxDQUFDVSxJQUFmLENBQVg7RUFDRCxDQUZELE1BRU87SUFDTCxJQUFJQSxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1UsSUFBZjtFQUNEOztFQUNELElBQUksVUFBVUEsSUFBVixJQUFrQixLQUF0QixFQUE2QjtJQUMzQlQsR0FBRyxDQUFDRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7TUFDbkJDLElBQUksRUFBRSxVQURhO01BQ0RDLFFBQVEsRUFBRSxFQURUO01BQ2FDLE1BQU0sRUFBRSxDQUFDLENBRHRCO01BQ3lCQyxLQUFLLEVBQUUsRUFEaEM7TUFDb0NDLFFBQVEsRUFBRSxDQUFDO0lBRC9DLENBQXJCO0VBR0Q7O0VBQ0QsSUFBSUksSUFBSSxHQUFHSCxJQUFJLENBQUNHLElBQWhCO0VBR0EsSUFBSUwsS0FBSixFQUFXTSxXQUFYLEVBQXdCQyxnQkFBeEIsRUFBMENDLFNBQTFDLEVBQXFEUCxRQUFyRCxFQUErRFEsU0FBL0QsQ0FuQkEsQ0FxQkE7O0VBQ0EsSUFBSSxXQUFXSixJQUFYLElBQW1CLEtBQXZCLEVBQThCO0lBQzVCWixHQUFHLENBQUNFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtNQUNuQkMsSUFBSSxFQUFFLGNBRGE7TUFDR0MsUUFBUSxFQUFFLEVBRGI7TUFDaUJDLE1BQU0sRUFBRSxDQUFDLENBRDFCO01BQzZCQyxLQUFLLEVBQUUsRUFEcEM7TUFDd0NDLFFBQVEsRUFBRSxDQUFDO0lBRG5ELENBQXJCO0VBR0QsQ0FKRCxNQUlPO0lBQ0xELEtBQUssR0FBR0ssSUFBSSxDQUFDTCxLQUFiO0VBQ0Q7O0VBQ0QsSUFBSSxlQUFlSyxJQUFmLElBQXVCLEtBQTNCLEVBQWtDO0lBQ2hDWixHQUFHLENBQUNFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtNQUNuQkMsSUFBSSxFQUFFLDJCQURhO01BQ2dCQyxRQUFRLEVBQUUsRUFEMUI7TUFDOEJDLE1BQU0sRUFBRSxDQUFDLENBRHZDO01BQzBDQyxLQUFLLEVBQUUsRUFEakQ7TUFDcURDLFFBQVEsRUFBRSxDQUFDO0lBRGhFLENBQXJCO0VBR0QsQ0FKRCxNQUlPO0lBQ0xRLFNBQVMsR0FBR0osSUFBSSxDQUFDSSxTQUFqQjtFQUNEOztFQUVELElBQUksaUJBQWlCSixJQUFqQixJQUF5QixLQUE3QixFQUFvQztJQUNsQ0MsV0FBVyxHQUFHLEVBQWQ7RUFDRCxDQUZELE1BRU87SUFDTEEsV0FBVyxHQUFHRCxJQUFJLENBQUNDLFdBQW5CO0VBQ0Q7O0VBQ0QsSUFBSSxzQkFBc0JELElBQXRCLElBQThCLEtBQWxDLEVBQXlDO0lBQ3ZDRSxnQkFBZ0IsR0FBRyxFQUFuQjtFQUNELENBRkQsTUFFTztJQUNMQSxnQkFBZ0IsR0FBR0YsSUFBSSxDQUFDRSxnQkFBeEI7RUFDRDs7RUFDRCxJQUFJLGVBQWVGLElBQWYsSUFBdUIsS0FBM0IsRUFBa0M7SUFDaENHLFNBQVMsR0FBR0UsSUFBSSxDQUFDQyxHQUFMLEVBQVo7RUFDRCxDQUZELE1BRU87SUFDTEgsU0FBUyxHQUFHSCxJQUFJLENBQUNHLFNBQWpCO0VBQ0Q7O0VBQ0QsSUFBSSxjQUFjSCxJQUFkLElBQXNCLEtBQTFCLEVBQWlDO0lBQy9CO0lBQ0EsSUFBSU8sTUFBTSxHQUFHLElBQUlGLElBQUosRUFBYjtJQUNBRSxNQUFNLENBQUNDLFdBQVAsQ0FBbUJELE1BQU0sQ0FBQ0UsV0FBUCxLQUF1QixDQUExQztJQUNBYixRQUFRLEdBQUdXLE1BQU0sQ0FBQ0csT0FBUCxFQUFYO0VBQ0QsQ0FMRCxNQUtPO0lBQ0xkLFFBQVEsR0FBR0ksSUFBSSxDQUFDSixRQUFoQjtFQUNEOztFQUNEZSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQkFBWixFQUFrQ2pCLEtBQWxDLEVBQXlDTSxXQUF6QyxFQUFzREMsZ0JBQXRELEVBQXdFQyxTQUF4RSxFQUFtRlAsUUFBbkYsRUFBNkZRLFNBQTdGO0VBRUEsSUFBSVMsUUFBUSxHQUFHLE1BQU01QiwwREFBUyxDQUFDVSxLQUFELEVBQVFNLFdBQVIsRUFBcUJDLGdCQUFyQixFQUF1Q0MsU0FBdkMsRUFBa0RQLFFBQWxELEVBQTREUSxTQUE1RCxDQUE5QjtFQUVBaEIsR0FBRyxDQUFDRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7SUFBRUMsSUFBSSxFQUFFLFVBQVI7SUFBb0JDLFFBQVEsRUFBRW9CLFFBQVEsQ0FBQ3BCLFFBQXZDO0lBQWlEQyxNQUFNLEVBQUVtQixRQUFRLENBQUNuQixNQUFsRTtJQUEwRUMsS0FBSyxFQUFFQSxLQUFqRjtJQUF3RkMsUUFBUSxFQUFFQTtFQUFsRyxDQUFyQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3JjLy4vcGFnZXMvYXBpL2dlbmVyYXRlUG9sbC50cz8zMDE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5leHQuanMgQVBJIHJvdXRlIHN1cHBvcnQ6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yb3V0ZXMvaW50cm9kdWN0aW9uXG5cbi8qKiBcbiAqIEBkZXNjcmlwdGlvbjogVGhpcyBpcyB0aGUgQVBJIGVuZHBvaW50IGZvciBnZW5lcmF0aW5nIGFuZCBzdG9yaW5nIGEgcG9sbCBpbiB0aGUgREIuXG4qL1xuXG5pbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0J1xuaW1wb3J0IHtzdG9yZVBvbGx9IGZyb20gJy4vaGVscGVycy9tZXJrbGUnXG5pbXBvcnQgcHJpc21hIGZyb20gJy4uLy4uL2xpYi9wcmlzbWEnXG5pbXBvcnQgeyBQcmlzbWEgfSBmcm9tICdAcHJpc21hL2NsaWVudCdcblxudHlwZSBEYXRhID0ge1xuICBuYW1lOiBzdHJpbmdcbiAgcm9vdEhhc2g6IHN0cmluZ1xuICBwb2xsSWQ6IG51bWJlclxuICB0aXRsZTogc3RyaW5nXG4gIGRlYWRsaW5lOiBudW1iZXJcbn1cblxuLyoqIFxuICogQGZ1bmN0aW9uOiBoYW5kbGVyXG4gKiBAZGVzY3JpcHRpb246IFRoaXMgaXMgdGhlIGhhbmRsZXIgZm9yIHRoZSBBUEkgZW5kcG9pbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxLmJvZHkuZGF0YS50aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgcG9sbC5cbiAqIEBwYXJhbSB7W11zdHJpbmd9IHJlcS5ib2R5LmRhdGEuYWRkcmVzc2VzIC0gVGhlIGFkZHJlc3NlcyB0aGF0IGNhbiB2b3RlIGluIHRoZSBwb2xsLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlcS5ib2R5LmRhdGEuZGVzY3JpcHRpb24gLSBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBvbGwuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxLmJvZHkuZGF0YS5ncm91cERlc2NyaXB0aW9uIC0gVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBncm91cC5cbiAqIEBwYXJhbSB7bnVtYmVyfSByZXEuYm9keS5kYXRhLmNyZWF0ZWRBdCAtIFRoZSB0aW1lIHRoZSBwb2xsIHdhcyBjcmVhdGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHJlcS5ib2R5LmRhdGEuZGVhZGxpbmUgLSBUaGUgZGVhZGxpbmUgb2YgdGhlIHBvbGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlPERhdGE+XG4pIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJlcy5zdGF0dXMoNDA1KS5qc29uKHtcbiAgICAgIG5hbWU6IFwiUE9TVCBlbmRwb2ludCFcIiwgcm9vdEhhc2g6IFwiXCIsIHBvbGxJZDogLTEsIHRpdGxlOiBcIlwiLCBkZWFkbGluZTogLTFcbiAgICB9KVxuICB9XG4gIGlmICh0eXBlb2YgcmVxLmJvZHkgPT0gJ3N0cmluZycpIHtcbiAgICB2YXIgYm9keSA9IEpTT04ucGFyc2UocmVxLmJvZHkpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGJvZHkgPSByZXEuYm9keVxuICB9XG4gIGlmIChcImRhdGFcIiBpbiBib2R5ID09IGZhbHNlKSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgbmFtZTogXCJObyBkYXRhIVwiLCByb290SGFzaDogXCJcIiwgcG9sbElkOiAtMSwgdGl0bGU6IFwiXCIsIGRlYWRsaW5lOiAtMVxuICAgIH0pXG4gIH1cbiAgdmFyIGRhdGEgPSBib2R5LmRhdGFcblxuXG4gIHZhciB0aXRsZSwgZGVzY3JpcHRpb24sIGdyb3VwRGVzY3JpcHRpb24sIGNyZWF0ZWRBdCwgZGVhZGxpbmUsIGFkZHJlc3Nlc1xuXG4gIC8vIFJlcXVpcmVkIGZpZWxkcyFcbiAgaWYgKFwidGl0bGVcIiBpbiBkYXRhID09IGZhbHNlKSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgbmFtZTogXCJBZGQgYSB0aXRsZSFcIiwgcm9vdEhhc2g6IFwiXCIsIHBvbGxJZDogLTEsIHRpdGxlOiBcIlwiLCBkZWFkbGluZTogLTFcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRpdGxlID0gZGF0YS50aXRsZVxuICB9XG4gIGlmIChcImFkZHJlc3Nlc1wiIGluIGRhdGEgPT0gZmFsc2UpIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBuYW1lOiBcIk11c3QgaGF2ZSBzb21lIGFkZHJlc3NlcyFcIiwgcm9vdEhhc2g6IFwiXCIsIHBvbGxJZDogLTEsIHRpdGxlOiBcIlwiLCBkZWFkbGluZTogLTFcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGFkZHJlc3NlcyA9IGRhdGEuYWRkcmVzc2VzXG4gIH1cblxuICBpZiAoXCJkZXNjcmlwdGlvblwiIGluIGRhdGEgPT0gZmFsc2UpIHtcbiAgICBkZXNjcmlwdGlvbiA9IFwiXCJcbiAgfSBlbHNlIHtcbiAgICBkZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb25cbiAgfVxuICBpZiAoXCJncm91cERlc2NyaXB0aW9uXCIgaW4gZGF0YSA9PSBmYWxzZSkge1xuICAgIGdyb3VwRGVzY3JpcHRpb24gPSBcIlwiXG4gIH0gZWxzZSB7XG4gICAgZ3JvdXBEZXNjcmlwdGlvbiA9IGRhdGEuZ3JvdXBEZXNjcmlwdGlvblxuICB9XG4gIGlmIChcImNyZWF0ZWRBdFwiIGluIGRhdGEgPT0gZmFsc2UpIHtcbiAgICBjcmVhdGVkQXQgPSBEYXRlLm5vdygpXG4gIH0gZWxzZSB7XG4gICAgY3JlYXRlZEF0ID0gZGF0YS5jcmVhdGVkQXRcbiAgfVxuICBpZiAoXCJkZWFkbGluZVwiIGluIGRhdGEgPT0gZmFsc2UpIHtcbiAgICAvLyBGaXg6IFNldCB0aW1lIHRvIDEgaG91ciBmcm9tIG5vd1xuICAgIHZhciBteURhdGUgPSBuZXcgRGF0ZSgpXG4gICAgbXlEYXRlLnNldFVUQ0hvdXJzKG15RGF0ZS5nZXRVVENIb3VycygpICsgMSlcbiAgICBkZWFkbGluZSA9IG15RGF0ZS5nZXRUaW1lKClcbiAgfSBlbHNlIHtcbiAgICBkZWFkbGluZSA9IGRhdGEuZGVhZGxpbmVcbiAgfVxuICBjb25zb2xlLmxvZyhcIlBhcnNlZCBDb3JyZWN0bHk6IFwiLCB0aXRsZSwgZGVzY3JpcHRpb24sIGdyb3VwRGVzY3JpcHRpb24sIGNyZWF0ZWRBdCwgZGVhZGxpbmUsIGFkZHJlc3NlcylcblxuICB2YXIgcG9sbERhdGEgPSBhd2FpdCBzdG9yZVBvbGwodGl0bGUsIGRlc2NyaXB0aW9uLCBncm91cERlc2NyaXB0aW9uLCBjcmVhdGVkQXQsIGRlYWRsaW5lLCBhZGRyZXNzZXMpXG4gIFxuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG5hbWU6IFwiU3VjY2VzcyFcIiwgcm9vdEhhc2g6IHBvbGxEYXRhLnJvb3RIYXNoLCBwb2xsSWQ6IHBvbGxEYXRhLnBvbGxJZCwgdGl0bGU6IHRpdGxlLCBkZWFkbGluZTogZGVhZGxpbmUgfSlcbn1cbiJdLCJuYW1lcyI6WyJzdG9yZVBvbGwiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsIm5hbWUiLCJyb290SGFzaCIsInBvbGxJZCIsInRpdGxlIiwiZGVhZGxpbmUiLCJib2R5IiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImRlc2NyaXB0aW9uIiwiZ3JvdXBEZXNjcmlwdGlvbiIsImNyZWF0ZWRBdCIsImFkZHJlc3NlcyIsIkRhdGUiLCJub3ciLCJteURhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0hvdXJzIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJsb2ciLCJwb2xsRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/generatePoll.ts\n");

/***/ }),

/***/ "(api)/./pages/api/helpers/merkle.ts":
/*!*************************************!*\
  !*** ./pages/api/helpers/merkle.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSiblingsAndPathIndices\": () => (/* binding */ getSiblingsAndPathIndices),\n/* harmony export */   \"storePoll\": () => (/* binding */ storePoll),\n/* harmony export */   \"verifyAddressInTree\": () => (/* binding */ verifyAddressInTree)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n/* harmony import */ var _merklePoseidon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./merklePoseidon */ \"(api)/./pages/api/helpers/merklePoseidon.ts\");\n\n\n// const buildPoseidon = require(\"circomlibjs\").buildPoseidon;\n// /**\n//  * Custom poseidon hash function that hashes strings.\n//  * @returns {Promise<Function>} poseidon - The poseidon hash function.\n//  */\n// const buildCustomPoseidon = async (): Promise<Function> => {\n//     const poseidon = await buildPoseidon();\n//     return (x: string[]) => {\n//         const hashString = poseidon.F.toString(poseidon(x));\n//         // console.log(parseInt(hashString).toString(16))\n//         // const hexOfString = Buffer.from(x, 'utf8').toString('hex');\n//         // const bigIntOfString = BigInt(\"0x\" + hexOfString);\n//         // const poseidonHashOutput = poseidon([bigIntOfString]);\n//         // console.log(poseidonHashOutput);\n//         // console.log(parseInt(poseidon.F.toString(poseidonHashOutput)).toString(16))\n//         // return poseidonHashOutput;\n//         return hashString\n//     }\n// }\n\n/** \n * @function: storePoll\n * @description: This function creates a merkle tree and stores the result inside of the database.\n * @returns {BigInt} root - The root hash of the merkle tree created.\n * @returns {number} pollId - The poll id of the poll that was created.\n */\nasync function storePoll(title, description, groupDescription, createdAt, deadline, addresses) {\n  var title = title;\n  var description = description;\n  var groupDescription = groupDescription;\n  var dateCreatedAt = new Date(createdAt);\n  var dateDeadline = new Date(deadline); // TODO: CONFIRM THAT ADDRESSES ARE VALID (Molly will probs take care of this) Yep\n  // Import poseidon hash function\n  // const poseidon = await buildCustomPoseidon();\n  // const poseidon = await buildPoseidon();\n  // Handles arbitrary input!\n\n  var tree = await (0,_merklePoseidon__WEBPACK_IMPORTED_MODULE_1__.buildTreePoseidon)(addresses);\n  console.log(tree.root);\n  var rootString = tree.root.toString(); // var root = tree.getRoot().toString('hex')\n\n  var poll = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].poll.create({\n    data: {\n      title: title,\n      description: description,\n      groupDescription: groupDescription,\n      createdAt: dateCreatedAt,\n      deadline: dateDeadline,\n      tree: {\n        create: {\n          rootHash: rootString,\n          leaves: addresses\n        }\n      }\n    }\n  }); // TODO: CONTRACT CALL TO CREATE POLL IN CONTRACT\n  // const allPolls = await prisma.poll.findMany({\n  //     include: {\n  //       tree: true,\n  //     },\n  // })\n  // Print all polls!\n  // console.dir(allPolls, { depth: null })\n\n  return {\n    rootHash: rootString,\n    pollId: poll.id\n  };\n}\n/** \n * @function: verifyAddressInTree\n * @description: This function verifies if an address is in a merkle tree.\n * @returns {boolean} isValidPollId - Whether or not the poll id is valid.\n * @returns {number} inTree - Whether or not the address is in the tree.\n */\n\nasync function verifyAddressInTree(address, pollId) {\n  const data = await getTreeFromPollId(pollId);\n\n  if (data.tree == null) {\n    return {\n      isValidPollId: false,\n      inTree: false\n    };\n  }\n\n  var tree = data.tree;\n  var merkleTree = await (0,_merklePoseidon__WEBPACK_IMPORTED_MODULE_1__.buildTreePoseidon)(tree.leaves);\n  var BigIntAddress = BigInt(address).toString();\n  var inTree = await (0,_merklePoseidon__WEBPACK_IMPORTED_MODULE_1__.verifyInTree)(merkleTree.root.toString(), address, merkleTree.leafToPathElements[BigIntAddress], merkleTree.leafToPathIndices[BigIntAddress]); // console.log(\"inTree\", inTree)\n  // var inTree = merkleTree.verify(proof, address, merkleTree.getRoot())\n\n  return {\n    isValidPollId: true,\n    inTree: inTree\n  };\n}\n/** \n * @function: getSiblingsAndPathIndices\n * @description: This function gets the siblings and path indices of an address in a merkle tree for the verifier & generator.\n * @returns {boolean} isValidPollId - Whether or not the poll id is valid.\n * @returns {[]string} siblings - The siblings of the address in the merkle tree.\n * @returns {[]number} pathIndices - The path indices of the siblings {0, 1} (sibling on right, sibling on left).\n */\n\nasync function getSiblingsAndPathIndices(address, pollId) {\n  const data = await getTreeFromPollId(pollId);\n\n  if (data.tree == null) {\n    return {\n      isValidPollId: false,\n      siblings: [],\n      pathIndices: []\n    };\n  }\n\n  var tree = data.tree;\n  var merkleTree = await (0,_merklePoseidon__WEBPACK_IMPORTED_MODULE_1__.buildTreePoseidon)(tree.leaves);\n  console.log(merkleTree.leafToPathElements);\n  console.log(merkleTree.leafToPathIndices); // const proof = merkleTree.getProof(address)\n  // var siblings = []\n  // var pathIndices = []\n  // for (var i = 0; i < proof.length; i++) {\n  //     var siblingHash = proof[i].data.toString('hex')\n  //     siblings.push(siblingHash)\n  //     // If left 0, if right 1\n  //     var pathIndex = proof[i].position == 'left' ? 1 : 0\n  //     pathIndices.push(pathIndex)\n  // }\n\n  var siblings = []; // console.log(await merkleTree.leafToPathIndices.length)\n  // console.log(merkleTree.leafToPathElements[address])\n\n  var BigIntAddress = BigInt(address).toString();\n  console.log(BigIntAddress);\n  var BigIntSiblings = merkleTree.leafToPathElements[BigIntAddress];\n  console.log(BigIntSiblings);\n\n  for (var i = 0; i < BigIntSiblings.length; i++) {\n    siblings.push(BigIntSiblings[i].toString());\n  }\n\n  return {\n    isValidPollId: true,\n    siblings: siblings,\n    pathIndices: merkleTree.leafToPathIndices[BigIntAddress]\n  };\n}\n/** \n * @function: getSiblingsAndPathIndices\n * @description: This function gets the siblings and path indices of an address in a merkle tree for the verifier & generator.\n * @returns {number} pollId - Poll id of the poll that was created.\n * @returns {[]string} tree - The merkle tree that was created.\n */\n\nasync function getTreeFromPollId(pollId) {\n  const tree = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__[\"default\"].merkleTree.findUnique({\n    where: {\n      id: pollId\n    }\n  }); // Print all polls!\n  // console.dir(tree, { depth: null })\n\n  return {\n    tree: tree,\n    pollId: pollId\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/helpers/merkle.ts\n");

/***/ }),

/***/ "(api)/./pages/api/helpers/merklePoseidon.ts":
/*!*********************************************!*\
  !*** ./pages/api/helpers/merklePoseidon.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildTreePoseidon\": () => (/* binding */ buildTreePoseidon),\n/* harmony export */   \"verifyInTree\": () => (/* binding */ verifyInTree)\n/* harmony export */ });\n// NOTE: copied from personaelabs/data because I(@lsankar4033) don't know how to npm typescript\nconst buildPoseidon = (__webpack_require__(/*! circomlibjs */ \"circomlibjs\").buildPoseidon);\n\nvar poseidon;\nlet F; // NOTE: picked this as the null field element arbitrarily\n\nconst NULL_NODE = 1n;\n\nasync function verifyInTree(root, address, siblings, pathIndices) {\n  poseidon = await buildPoseidon();\n  F = poseidon.F;\n  const rootBigInt = BigInt(root);\n  console.log(rootBigInt);\n  const addressBigInt = BigInt(address);\n  const siblingsBigInt = siblings.map(BigInt); // console.log(siblingsBigInt)\n\n  const pathIndicesBigInt = pathIndices.map(BigInt); // console.log(pathIndicesBigInt)\n\n  let curHash = addressBigInt;\n  console.log(\"Cur Hash: \", curHash);\n\n  for (let i = 0; i < siblingsBigInt.length; i++) {\n    if (pathIndicesBigInt[i] === 0n) {\n      curHash = F.toObject(poseidon([curHash, siblingsBigInt[i]]));\n    } else {\n      curHash = F.toObject(poseidon([siblingsBigInt[i], curHash]));\n    }\n\n    console.log(\"Cur Hash: \", curHash);\n  }\n\n  var isEqual = curHash.toString() == rootBigInt.toString();\n  return isEqual;\n} // NOTE: default tree depth based on dao hack confessions\n\n\nasync function buildTreePoseidon(leaves, depth = 16, proof_depth = 16, nullNode = NULL_NODE) {\n  //   if (!poseidon) {\n  //     poseidon = await buildPoseidon();\n  //     F = poseidon.F;\n  //   }\n  poseidon = await buildPoseidon();\n  F = poseidon.F; // pad with nullNode to guarantee a tree of the desired depth\n\n  const requiredLeaves = 2 ** depth;\n\n  if (leaves.length < requiredLeaves) {\n    leaves = leaves.concat(Array(requiredLeaves - leaves.length).fill(nullNode));\n  }\n\n  leaves = leaves.map(BigInt);\n  leaves.sort(); // the equivalent of pathElements and pathIndices in merkle.circom\n\n  const outputLeaves = leaves.filter(w => w !== nullNode); // console.log(outputLeaves)\n\n  let leafToPathElements = Object.fromEntries(outputLeaves.map(w => [w, []]));\n  let leafToPathIndices = Object.fromEntries(outputLeaves.map(w => [w, []]));\n  let nodeToLeaves = Object.fromEntries(leaves.map(w => [w, [w]]));\n  let curLevel = leaves;\n\n  while (curLevel.length > 1) {\n    let newLevel = [];\n\n    for (let i = 0; i < curLevel.length; i += 2) {\n      // console.log(curLevel[i])\n      let child1 = curLevel[i];\n      let child2 = i == curLevel.length - 1 ? nullNode : curLevel[i + 1];\n      let child1Leaves = nodeToLeaves[child1];\n      let child2Leaves = child2 == nullNode ? [] : nodeToLeaves[child2];\n\n      for (const leaf of child1Leaves) {\n        if (leaf !== nullNode) {\n          leafToPathElements[leaf].push(child2);\n          leafToPathIndices[leaf].push(\"0\");\n        }\n      }\n\n      for (const leaf of child2Leaves) {\n        if (leaf !== nullNode) {\n          leafToPathElements[leaf].push(child1);\n          leafToPathIndices[leaf].push(\"1\");\n        }\n      }\n\n      let poseidonRes = poseidon([child1, child2]);\n      let parent = F.toObject(poseidonRes);\n      nodeToLeaves[parent] = child1Leaves.concat(child2Leaves);\n      newLevel.push(parent);\n    }\n\n    curLevel = newLevel;\n  }\n\n  for (const leaf in leafToPathElements) {\n    while (leafToPathElements[leaf].length < proof_depth) {\n      leafToPathElements[leaf].push(nullNode);\n      leafToPathIndices[leaf].push(\"0\");\n    }\n  }\n\n  return {\n    root: curLevel[0],\n    leafToPathElements,\n    leafToPathIndices\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/helpers/merklePoseidon.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/generatePoll.ts"));
module.exports = __webpack_exports__;

})();